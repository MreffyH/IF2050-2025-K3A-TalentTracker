-- MySQL Script generated by MySQL Workbench
-- Fri Jun  6 22:45:49 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS mydb DEFAULT CHARACTER SET utf8 ;

-- -----------------------------------------------------
-- Table `mydb`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`User` (
  idUser INT NOT NULL,
  fullName VARCHAR(30) NOT NULL,
  email VARCHAR(30) NOT NULL,
  password VARCHAR(255) NOT NULL,
  role ENUM('CEO', 'Staff', 'Artist') NOT NULL,
  attendancePercentage DECIMAL(5,2) NULL DEFAULT 0,
  salary INT NULL DEFAULT 0,
  PRIMARY KEY (`idUser`),
  UNIQUE INDEX idUser_UNIQUE (`idUser` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Project`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Project` (
  idProject INT NOT NULL,
  projectName VARCHAR(45) NOT NULL,
  type VARCHAR(45) NOT NULL,
  description TEXT NOT NULL,
  idCEO INT NOT NULL,
  idStaff INT NOT NULL,
  startDate DATETIME NOT NULL,
  endDate DATETIME NOT NULL,
  PRIMARY KEY (`idProject`),
  UNIQUE INDEX idProject_UNIQUE (`idProject` ASC) VISIBLE,
  INDEX idStaff_Project_idx (`idStaff` ASC) VISIBLE,
  INDEX idCEO_Project_idx (`idCEO` ASC) VISIBLE,
  CONSTRAINT idStaff_Project
    FOREIGN KEY (`idStaff`)
    REFERENCES `mydb`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT idCEO_Project
    FOREIGN KEY (`idCEO`)
    REFERENCES `mydb`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`ProjectArtist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`ProjectArtist` (
  idArtist INT NOT NULL,
  idProject INT NOT NULL,
  PRIMARY KEY (`idArtist`, `idProject`),
  INDEX fk_User_has_Project_Project1_idx (`idProject` ASC) VISIBLE,
  INDEX fk_User_has_Project_User_idx (`idArtist` ASC) VISIBLE,
  CONSTRAINT fk_Project_User_Artist
    FOREIGN KEY (`idArtist`)
    REFERENCES `mydb`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_Project_User_Project
    FOREIGN KEY (`idProject`)
    REFERENCES `mydb`.`Project` (`idProject`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Attendance`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Attendance` (
  id INT NOT NULL AUTO_INCREMENT,
  idStaff INT NOT NULL,
  date DATE NULL,
  time TIME NULL,
  attendance TINYINT(1) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX idStaff_Absensi_idx (`idStaff` ASC) VISIBLE,
  CONSTRAINT idStaff_Absensi
    FOREIGN KEY (`idStaff`)
    REFERENCES `mydb`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`FansResponse`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`FansResponse` (
  idResponse INT NOT NULL,
  source ENUM('Instagram', 'X', 'TikTok') NULL,
  comment TEXT NULL,
  category ENUM('Positive', 'Negative', 'Neutral') NULL,
  timestamp TIMESTAMP NULL,
  idArtis INT NOT NULL,
  PRIMARY KEY (`idResponse`),
  INDEX fk_FansResponse_User1_idx (`idArtis` ASC) VISIBLE,
  CONSTRAINT fk_FansResponse_User1
    FOREIGN KEY (`idArtis`)
    REFERENCES `mydb`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Popularity`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Popularity` (
  socialMedia ENUM('Instagram', 'X', 'TikTok') NOT NULL,
  todayFollowers INT NULL,
  date DATE NOT NULL,
  idArtis INT NOT NULL,
  PRIMARY KEY (`idArtis`, `socialMedia`, `date`),
  CONSTRAINT `fk_Popularity_User1`
    FOREIGN KEY (`idArtis`)
    REFERENCES `mydb`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Visitors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Visitors` (
  visitorsToday INT NULL,
  date DATE NOT NULL,
  idArtis INT NOT NULL,
  PRIMARY KEY (`idArtis`, `date`),
  CONSTRAINT fk_Visitors_User1
    FOREIGN KEY (`idArtis`)
    REFERENCES `mydb`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Sales`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Sales` (
  idSales INT AUTO_INCREMENT PRIMARY KEY,
  idArtis INT,
  date DATE,
  salesToday DOUBLE,
  FOREIGN KEY (idArtis) REFERENCES User(idUser)
);


-- -----------------------------------------------------
-- Table `mydb`.`TopAlbum`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`TopAlbum` (
  id INT NOT NULL AUTO_INCREMENT,
  albumName VARCHAR(20) NULL,
  sold INT NULL,
  date DATE NULL,
  idArtis INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX fk_TopAlbum_User1_idx (`idArtis` ASC) VISIBLE,
  CONSTRAINT fk_TopAlbum_User1
    FOREIGN KEY (`idArtis`)
    REFERENCES `mydb`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`AlbumSold`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`AlbumSold` (
  albumSoldToday INT NULL,
  date DATE NOT NULL,
  idArtis INT NOT NULL,
  PRIMARY KEY (`idArtis`, `date`),
  CONSTRAINT fk_AlbumSold_User1
    FOREIGN KEY (`idArtis`)
    REFERENCES `mydb`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER $$
CREATE TRIGGER trg_validate_role_project
BEFORE INSERT ON Project
FOR EACH ROW
BEGIN
    DECLARE role_ceo ENUM('CEO','Staff','Artist');
    DECLARE role_staf ENUM('CEO','Staff','Artist');

    SELECT role INTO role_ceo FROM user WHERE idUser = NEW.idCEO;
    IF role_ceo != 'CEO' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'idCEO harus merujuk pada user dengan role CEO';
    END IF;

    SELECT role INTO role_staf FROM user WHERE idUser = NEW.idStaff;
    IF role_staf != 'Staff' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'idStaf harus merujuk pada user dengan role Staff';
    END IF;
END;$$

CREATE TRIGGER trg_Check_ProjectArtist_idArtist
BEFORE INSERT ON ProjectArtist
FOR EACH ROW
BEGIN
    DECLARE role_user ENUM('CEO', 'Staff', 'Artist');

    SELECT role INTO role_user FROM user WHERE idUser = NEW.idArtist;

    IF role_user != 'Artist' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'idArtist harus merujuk ke user dengan role = Artist';
    END IF;
END;$$

CREATE TRIGGER trg_update_attendance_staff
AFTER INSERT ON Attendance
FOR EACH ROW
BEGIN
    DECLARE role_user ENUM('CEO', 'Staff', 'Artist');
    DECLARE jumlah_hari INT;
    DECLARE hadir_count INT;
    DECLARE persen DECIMAL(5,2);

    SELECT role INTO role_user FROM user WHERE idUser = NEW.idStaff;

    IF role_user != 'Staff' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Hanya user dengan role = Staff yang boleh mengisi absensi';
    ELSE
        SELECT COUNT(*) INTO jumlah_hari
        FROM Attendance
        WHERE idStaff = NEW.idStaff
          AND MONTH(date) = MONTH(NEW.date)
          AND YEAR(date) = YEAR(NEW.date);

        SELECT COUNT(*) INTO hadir_count
        FROM Attendance
        WHERE idStaff = NEW.idStaff
          AND MONTH(date) = MONTH(NEW.date)
          AND YEAR(date) = YEAR(NEW.date)
          AND attended = TRUE;

        IF jumlah_hari > 0 THEN
            SET persen = (hadir_count / jumlah_hari) * 100;
 
            UPDATE User
            SET attendancePercentage = persen,
                salary = ROUND(persen / 100 * 10000000)
            WHERE idUser = NEW.idStaff;
        END IF;
    END IF;
END;$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;